// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

// FindSenderByAddressAndAccountID provides a mock function with given fields: ctx, accountId, address
func (_m *MockDB) FindSenderByAddressAndAccountID(ctx context.Context, accountId string, address string) (Sender, error) {
	ret := _m.Called(ctx, accountId, address)

	var r0 Sender
	if rf, ok := ret.Get(0).(func(context.Context, string, string) Sender); ok {
		r0 = rf(ctx, accountId, address)
	} else {
		r0 = ret.Get(0).(Sender)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, accountId, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSendersByAccountId provides a mock function with given fields: ctx, accountId
func (_m *MockDB) FindSendersByAccountId(ctx context.Context, accountId string) ([]Sender, error) {
	ret := _m.Called(ctx, accountId)

	var r0 []Sender
	if rf, ok := ret.Get(0).(func(context.Context, string) []Sender); ok {
		r0 = rf(ctx, accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Sender)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSendersByAddress provides a mock function with given fields: ctx, address
func (_m *MockDB) FindSendersByAddress(ctx context.Context, address string) ([]Sender, error) {
	ret := _m.Called(ctx, address)

	var r0 []Sender
	if rf, ok := ret.Get(0).(func(context.Context, string) []Sender); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Sender)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSenders provides a mock function with given fields: ctx, senders
func (_m *MockDB) InsertSenders(ctx context.Context, senders []Sender) ([]Sender, error) {
	ret := _m.Called(ctx, senders)

	var r0 []Sender
	if rf, ok := ret.Get(0).(func(context.Context, []Sender) []Sender); ok {
		r0 = rf(ctx, senders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Sender)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []Sender) error); ok {
		r1 = rf(ctx, senders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SenderAddressExists provides a mock function with given fields: ctx, address
func (_m *MockDB) SenderAddressExists(ctx context.Context, address string) (bool, error) {
	ret := _m.Called(ctx, address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
