// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package webhookpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Find(ctx context.Context, in *FindParams, opts ...grpc.CallOption) (*FindReply, error)
	Insert(ctx context.Context, in *InsertParams, opts ...grpc.CallOption) (*InsertReply, error)
	Delete(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*NoReply, error)
	Update(ctx context.Context, in *UpdateParams, opts ...grpc.CallOption) (*UpdateReply, error)
	PublishMMSStatusUpdate(ctx context.Context, in *PublishMMSStatusUpdateParams, opts ...grpc.CallOption) (*NoReply, error)
	PublishOptOut(ctx context.Context, in *PublishOptOutParams, opts ...grpc.CallOption) (*NoReply, error)
	PublishSMSStatusUpdate(ctx context.Context, in *PublishSMSStatusUpdateParams, opts ...grpc.CallOption) (*NoReply, error)
	PublishMO(ctx context.Context, in *PublishMOParams, opts ...grpc.CallOption) (*NoReply, error)
	PublishLinkHit(ctx context.Context, in *PublishLinkHitParams, opts ...grpc.CallOption) (*NoReply, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Find(ctx context.Context, in *FindParams, opts ...grpc.CallOption) (*FindReply, error) {
	out := new(FindReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Insert(ctx context.Context, in *InsertParams, opts ...grpc.CallOption) (*InsertReply, error) {
	out := new(InsertReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Delete(ctx context.Context, in *DeleteParams, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Update(ctx context.Context, in *UpdateParams, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PublishMMSStatusUpdate(ctx context.Context, in *PublishMMSStatusUpdateParams, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/PublishMMSStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PublishOptOut(ctx context.Context, in *PublishOptOutParams, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/PublishOptOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PublishSMSStatusUpdate(ctx context.Context, in *PublishSMSStatusUpdateParams, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/PublishSMSStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PublishMO(ctx context.Context, in *PublishMOParams, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/PublishMO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PublishLinkHit(ctx context.Context, in *PublishLinkHitParams, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/webhookpb.Service/PublishLinkHit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Find(context.Context, *FindParams) (*FindReply, error)
	Insert(context.Context, *InsertParams) (*InsertReply, error)
	Delete(context.Context, *DeleteParams) (*NoReply, error)
	Update(context.Context, *UpdateParams) (*UpdateReply, error)
	PublishMMSStatusUpdate(context.Context, *PublishMMSStatusUpdateParams) (*NoReply, error)
	PublishOptOut(context.Context, *PublishOptOutParams) (*NoReply, error)
	PublishSMSStatusUpdate(context.Context, *PublishSMSStatusUpdateParams) (*NoReply, error)
	PublishMO(context.Context, *PublishMOParams) (*NoReply, error)
	PublishLinkHit(context.Context, *PublishLinkHitParams) (*NoReply, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Find(context.Context, *FindParams) (*FindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedServiceServer) Insert(context.Context, *InsertParams) (*InsertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedServiceServer) Delete(context.Context, *DeleteParams) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceServer) Update(context.Context, *UpdateParams) (*UpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedServiceServer) PublishMMSStatusUpdate(context.Context, *PublishMMSStatusUpdateParams) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMMSStatusUpdate not implemented")
}
func (UnimplementedServiceServer) PublishOptOut(context.Context, *PublishOptOutParams) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishOptOut not implemented")
}
func (UnimplementedServiceServer) PublishSMSStatusUpdate(context.Context, *PublishSMSStatusUpdateParams) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishSMSStatusUpdate not implemented")
}
func (UnimplementedServiceServer) PublishMO(context.Context, *PublishMOParams) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMO not implemented")
}
func (UnimplementedServiceServer) PublishLinkHit(context.Context, *PublishLinkHitParams) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLinkHit not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Find(ctx, req.(*FindParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Insert(ctx, req.(*InsertParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Delete(ctx, req.(*DeleteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Update(ctx, req.(*UpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PublishMMSStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMMSStatusUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PublishMMSStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/PublishMMSStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PublishMMSStatusUpdate(ctx, req.(*PublishMMSStatusUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PublishOptOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishOptOutParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PublishOptOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/PublishOptOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PublishOptOut(ctx, req.(*PublishOptOutParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PublishSMSStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishSMSStatusUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PublishSMSStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/PublishSMSStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PublishSMSStatusUpdate(ctx, req.(*PublishSMSStatusUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PublishMO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMOParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PublishMO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/PublishMO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PublishMO(ctx, req.(*PublishMOParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PublishLinkHit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishLinkHitParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PublishLinkHit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webhookpb.Service/PublishLinkHit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PublishLinkHit(ctx, req.(*PublishLinkHitParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webhookpb.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _Service_Find_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Service_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Service_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Service_Update_Handler,
		},
		{
			MethodName: "PublishMMSStatusUpdate",
			Handler:    _Service_PublishMMSStatusUpdate_Handler,
		},
		{
			MethodName: "PublishOptOut",
			Handler:    _Service_PublishOptOut_Handler,
		},
		{
			MethodName: "PublishSMSStatusUpdate",
			Handler:    _Service_PublishSMSStatusUpdate_Handler,
		},
		{
			MethodName: "PublishMO",
			Handler:    _Service_PublishMO_Handler,
		},
		{
			MethodName: "PublishLinkHit",
			Handler:    _Service_PublishLinkHit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook/rpc/webhookpb/webhook.proto",
}
