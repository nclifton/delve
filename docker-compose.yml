version: "3"

services:
  backend:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/Dockerfile
    image: backend
    hostname: backend
    tty: true
    volumes:
      - ./backend:/backend
    ports:
      - "10003:10003"
      - "10004:10004"
      - "10005:10005"
      - "10006:10006" 
      - "10012:10012"
      - "10013:10013" 
      - "10014:10014"
    environment:
      - DISABLE_NEW_RELIC=true
      - NR_NAME=TP Local
      - NR_LICENSE=3289b893db560c39096d3c222d4a33037c24f943
      - NR_TRACING=true

      - HEALTH_CHECK_HOST=backend

      - ADMINAPI_PORT=10014
      - ADMINAPI_SMS_RPC_ADDRESS=backend:10009
      - ADMINAPI_MMS_RPC_ADDRESS=backend:10007
      - ADMINAPI_ACCOUNT_RPC_ADDRESS=backend:10001

      - ACCOUNT_RPC_PORT=10001
      - ACCOUNT_RPC_HOST=backend
      - ACCOUNT_POSTGRES_URL=postgresql://postgres:example@postgres/account
      - ACCOUNT_REDIS_URL=redis:6379

      - MMS_RABBIT_URL=amqp://tp:TheToiletPaperPassword@rabbitmq:5672/mms
      - MMS_RABBIT_EXCHANGE=mms
      - MMS_RABBIT_EXCHANGE_TYPE=direct
      - MMS_RABBIT_PREFETCHED_COUNT=1
      - MMS_RPC_ADDRESS=backend:10007
      - MMS_POSTGRES_URL=postgresql://postgres:example@postgres/mms
      - MMS_WEBHOOK_RPC_ADDRESS=webhook-rpc-service:10002
      - MMS_TRACK_LINK_RPC_ADDRESS=backend:10010
      - MMS_OPTOUT_RPC_ADDRESS=backend:10011
      - MMS_SENDER_RPC_ADDRESS=sender-rpc-service:10015

      - MM7_RABBIT_URL=amqp://tp:TheToiletPaperPassword@rabbitmq:5672/mm7
      - MM7_RABBIT_EXCHANGE=mm7
      - MM7_RABBIT_EXCHANGE_TYPE=direct
      - MM7_RABBIT_PREFETCHED_COUNT=1
      - MM7_RPC_ADDRESS=backend:10003
      - MM7_REDIS_URL=redis:6379
      - MM7_TECLOO_URL=http://backend:10004/v1
      - MM7_TEMPLATE_PATH=mm7/templates
      - MM7_AWS_REGION=ap-southeast-2
      - MM7_MMS_MEDIA_BUCKET=tp-mms-media
      - MM7_AWS_S3_PUBLIC_URL=http://minio:9000
      - MM7_AWS_S3_PATH_STYLE=true
      - MM7_AWS_ACCESS_KEY=sendsei
      - MM7_AWS_SECRET_KEY=fr0gsn0g

      - MM7_MMS_RPC_ADDRESS=backend:10007
      - MM7_OPTUS_URL=http://172.17.0.1:7777/mm7/Mms
      - MM7_OPTUS_USER=COSTWbur
      - MM7_OPTUS_PASSWORD=G6VhUrMP

      - TECLOO_HTTP_PORT=10004
      - TECLOO_TEMPLATE_PATH=tecloo/templates
      - TECLOO_DR_ENDPOINT=http://backend:10004/v1/mms/inbound

      - TECLOO_RECEIVER_HTTP_PORT=10005
      - TECLOO_RECEIVER_TEMPLATE_PATH=tecloo_receiver/templates
      - TECLOO_RECEIVER_RABBIT_URL=amqp://tp:TheToiletPaperPassword@rabbitmq:5672/mm7
      - TECLOO_RECEIVER_RABBIT_EXCHANGE=mm7
      - TECLOO_RECEIVER_RABBIT_EXCHANGE_TYPE=direct

      - TUALET_HTTP_PORT=10006
      - TUALET_TEMPLATE_PATH=tualet/templates
      - TUALET_DLR_ENDPOINT=http://backend:10008/v1/sms/dlr
      - TUALET_MO_ENDPOINT=http://backend:10008/v1/sms/mo

      - SMS_INBOUND_PORT=10008
      - SMS_RPC_ADDRESS=backend:10009
      - SMS_POSTGRES_URL=postgresql://postgres:example@postgres/sms
      - SMS_RABBIT_URL=amqp://tp:TheToiletPaperPassword@rabbitmq:5672/sms
      - SMS_CLIENT_TIMEOUT=3
      - SMS_REDIS_URL=redis:6379
      - SMS_ALARIS_URL=http://backend:10006/api
      - SMS_WEBHOOK_RPC_ADDRESS=webhook-rpc-service:10002
      - SMS_TRACK_LINK_RPC_ADDRESS=backend:10010
      - SMS_OPTOUT_RPC_ADDRESS=backend:10011
      - SMS_SENDER_RPC_ADDRESS=sender-rpc-service:10015

      - OPTOUT_INBOUND_PORT=10012
      - OPTOUT_RPC_ADDRESS=backend:10011
      - OPTOUT_POSTGRES_URL=postgresql://postgres:example@postgres/optout
      - OPTOUT_REDIS_URL=redis:6379
      - OPTOUT_OPTOUTLINK_DOMAIN=localhost:10012
      - OPTOUT_WEBHOOK_RPC_ADDRESS=webhook-rpc-service:10002

      - TRACK_LINK_INBOUND_PORT=10013
      - TRACK_LINK_RPC_ADDRESS=backend:10010
      - TRACK_LINK_POSTGRES_URL=postgresql://postgres:example@postgres/track_link
      - TRACK_LINK_TRACKLINK_DOMAIN=localhost:10013
      - TRACK_LINK_WEBHOOK_RPC_ADDRESS=webhook-rpc-service:10002

      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1

      - TRACK_LINK_CONTAINER_PORT=10010
      - OPTOUT_CONTAINER_PORT=10011
      - MM7_CONTAINER_PORT=10003
      - MMS_CONTAINER_PORT=10007
      - SMS_CONTAINER_PORT=10009
      - ACCOUNT_CONTAINER_PORT=10001

      - TRACK_LINK_CONTAINER_NAME=backend
      - OPTOUT_CONTAINER_NAME=backend
      - MM7_CONTAINER_NAME=backend
      - MMS_CONTAINER_NAME=backend
      - SMS_CONTAINER_NAME=backend
      - ACCOUNT_CONTAINER_NAME=backend

    deploy:
      resources:
        limits:
          cpus: "4"
    depends_on:
      - jaeger
      - rabbitmq
      - redis
      - minio
      - miniosetup
      - postgres
      - accountpostgressetup
      - mmspostgressetup

  rabbitmq:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/Dockerfile_rabbitmq
    hostname: rabbitmq
    ports:
      - "27651:15672"
      - "56721:5672"

  redis:
    image: redis:3.2.9
    hostname: redis
    volumes:
      - redis_data:/data
    ports:
      - "16379:6379"

  minio:
    image: minio/minio
    hostname: minio
    command: server /data
    volumes:
      - minio_data:/data
    ports:
      - "9999:9000"
    environment:
      MINIO_ACCESS_KEY: mtmo-tp
      MINIO_SECRET_KEY: fr0gsn0g
      MINIO_REGION_NAME: ap-southeast-2

  miniosetup:
    image: minio/mc
    depends_on:
      - minio
    environment:
      MINIO_ACCESS_KEY: tp
      MINIO_SECRET_KEY: fr0gsn0g
      MINIO_REGION_NAME: ap-southeast-2
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio http://minio:9000 $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY} --api S3v4;
      /usr/bin/mc mb --ignore-existing --region=$${MINIO_REGION_NAME} minio/tp-csv;
      /usr/bin/mc policy set public minio/tp-csv;
      "

  postgres:
    image: postgres:11.8-alpine
    hostname: postgres
    volumes:
      - postgres_data:/data/postgres
    environment:
      POSTGRES_DB: "tp"
      POSTGRES_PASSWORD: "example"
      PGDATA: /data/postgres
    ports:
      - "54321:5432"

  jaeger:
    container_name: jaeger
    hostname: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  forestadmin:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/Dockerfile_forestadmin
    environment:
      - APPLICATION_PORT=3310
      - ACCOUNT_POSTGRES_URL=postgresql://postgres:example@postgres/account
      - WEBHOOK_POSTGRES_URL=postgresql://postgres:example@postgres/webhook
      - SMS_POSTGRES_URL=postgresql://postgres:example@postgres/sms
      - MMS_POSTGRES_URL=postgresql://postgres:example@postgres/mms
      - SENDER_POSTGRES_URL=postgresql://postgres:example@postgres/sender
      - FOREST_AUTH_SECRET=8d3d9df0260ad4414d18d77b5d16d585b636234357e56fac
      - FOREST_ENV_SECRET=470bdd45ada20f90a83f13c795b3422d5b8baf1198e81118b3e5fa2484579837
      - ADMIN_API_ADDRESS=http://backend:10014/v1
      - NODE_ENV=dev
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "13310:3310"
    volumes:
      - ./backend/forestadmin:/usr/src/app

  accountpostgressetup:
    build:
      context: .
      dockerfile: backend/account/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      ACCOUNT_POSTGRES_HOST: postgres
      ACCOUNT_POSTGRES_USER: postgres
      ACCOUNT_POSTGRES_PASSWORD: example
      ACCOUNT_POSTGRES_SSL: disable
      ACCOUNT_POSTGRES_NAME: account
      ACCOUNT_POSTGRES_AUTH_DB: postgres

  mmspostgressetup:
    build:
      context: .
      dockerfile: backend/mms/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      MMS_POSTGRES_HOST: postgres
      MMS_POSTGRES_USER: postgres
      MMS_POSTGRES_PASSWORD: example
      MMS_POSTGRES_SSL: disable
      MMS_POSTGRES_NAME: mms
      MMS_POSTGRES_AUTH_DB: postgres

  smspostgressetup:
    build:
      context: .
      dockerfile: backend/sms/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      SMS_POSTGRES_HOST: postgres
      SMS_POSTGRES_USER: postgres
      SMS_POSTGRES_PASSWORD: example
      SMS_POSTGRES_SSL: disable
      SMS_POSTGRES_NAME: sms
      SMS_POSTGRES_AUTH_DB: postgres

  webhookpostgressetup:
    build:
      context: .
      dockerfile: backend/webhook/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      WEBHOOK_POSTGRES_HOST: postgres
      WEBHOOK_POSTGRES_USER: postgres
      WEBHOOK_POSTGRES_PASSWORD: example
      WEBHOOK_POSTGRES_SSL: disable
      WEBHOOK_POSTGRES_NAME: webhook

  senderpostgressetup:
    build:
      context: .
      dockerfile: backend/sender/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_SSL: disable
      POSTGRES_NAME: sender

  tracklinkpostgressetup:
    build:
      context: .
      dockerfile: backend/track_link/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      TRACK_LINK_POSTGRES_HOST: postgres
      TRACK_LINK_POSTGRES_USER: postgres
      TRACK_LINK_POSTGRES_PASSWORD: example
      TRACK_LINK_POSTGRES_SSL: disable
      TRACK_LINK_POSTGRES_NAME: track_link

  optoutpostgressetup:
    build:
      context: .
      dockerfile: backend/optout/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      OPTOUT_POSTGRES_HOST: postgres
      OPTOUT_POSTGRES_USER: postgres
      OPTOUT_POSTGRES_PASSWORD: example
      OPTOUT_POSTGRES_SSL: disable
      OPTOUT_POSTGRES_NAME: optout

  webhook-rpc-service:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/DockerfileDomain.dev
    hostname: webhook-rpc-service
    entrypoint: ["/go/bin/modd", "--file=./webhook/rpc/modd.conf"]
    tty: true
    volumes:
      - ./backend:/backend
    ports:
      - "10002:10002"
      - "8086:8086"
    env_file:
      - backend/webhook/rpc/infra/values/dev-values.env
    depends_on:
      - rabbitmq
      - postgres
      - jaeger

  webhook-post-worker-service:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/DockerfileDomain.dev
    hostname: webhook-post-worker-service
    entrypoint: ["/go/bin/modd", "--file=./webhook/worker/modd.conf"]
    tty: true
    volumes:
      - ./backend:/backend
    env_file:
      - backend/webhook/worker/post/infra/values/dev-values.env
    depends_on:
      - rabbitmq
      - redis
      - jaeger

  sender-rpc-service:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/DockerfileDomain.dev
    hostname: sender-rpc-service
    entrypoint: ["/go/bin/modd", "--file=./sender/rpc/modd.conf"]
    tty: true
    volumes:
      - ./backend:/backend
    ports:
      - "10015:10015"
    env_file:
      - backend/sender/rpc/infra/values/dev-values.env
    depends_on:
      - postgres
  api:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/DockerfileDomain.dev
    hostname: api
    entrypoint: ["/go/bin/modd", "--file=./api/modd.conf"]
    tty: true
    volumes:
      - ./backend:/backend
    ports:
      - "10000:10000"
    env_file:
      - backend/api/infra/values/dev-values.env

volumes:
  redis_data:
  rabbitmq_data:
  minio_data:
  postgres_data:
