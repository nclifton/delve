version: "3"

services:
  backend:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/Dockerfile
    image: backend
    hostname: backend
    tty: true
    volumes:
      - ./backend:/backend
    ports:
      - "10000:10000"
      - "10003:10003"
      - "10004:10004"
      - "10005:10005"
      - "10006:10006"
      - "10007:10007"
    environment:
      - DISABLE_NEW_RELIC=true
      - NR_NAME=TP Local
      - NR_LICENSE=3289b893db560c39096d3c222d4a33037c24f943
      - NR_TRACING=true

      - API_PORT=10000
      - API_ACCOUNT_HOST=backend
      - API_ACCOUNT_PORT=10001
      - API_SMS_HOST=backend
      - API_SMS_PORT=10009

      - ACCOUNT_RPC_PORT=10001
      - ACCOUNT_POSTGRES_URL=postgresql://postgres:example@postgres/account

      - WEBHOOK_POSTGRES_URL=postgresql://postgres:example@postgres/webhook
      - WEBHOOK_RPC_HOST=backend
      - WEBHOOK_RPC_PORT=10002
      - WEBHOOK_RABBIT_URL=amqp://tp:TheToiletPaperPassword@rabbitmq:5672/webhook
      - WEBHOOK_CLIENT_TIMEOUT=3
      - WEBHOOK_REDIS_URL=redis:6379

      - MMS_RPC_PORT=10007
      - MMS_POSTGRES_URL=postgresql://postgres:example@postgres/mms

      - MM7_RABBIT_URL=amqp://tp:TheToiletPaperPassword@rabbitmq:5672/mm7
      - MM7_RABBIT_EXCHANGE=mm7
      - MM7_RABBIT_EXCHANGE_TYPE=direct
      - MM7_RABBIT_PREFETCHED_COUNT=1
      - MM7_RPC_PORT=10003
      - MM7_RPC_HOST=backend
      - MM7_REDIS_URL=redis:6379
      - MM7_TECLOO_URL=http://backend:7010/v1
      - MM7_TEMPLATE_PATH=tecloo/templates
      - MM7_AWS_REGION=ap-southeast-2
      - MM7_MMS_MEDIA_BUCKET=tp-mms-media
      - MM7_AWS_S3_PUBLIC_URL=http://minio:9000
      - MM7_AWS_S3_PATH_STYLE=true
      - MM7_AWS_ACCESS_KEY=sendsei
      - MM7_AWS_SECRET_KEY=fr0gsn0g

      - TECLOO_HTTP_PORT=10004
      - TECLOO_TEMPLATE_PATH=tecloo/templates
      - TECLOO_DR_ENDPOINT=http://backend:10004/v1/mms/inbound

      - TECLOO_RECEIVER_HTTP_PORT=10005
      - TECLOO_RECEIVER_TEMPLATE_PATH=tecloo_receiver/templates
      - TECLOO_RECEIVER_RABBIT_URL=amqp://tp:TheToiletPaperPassword@rabbitmq:5672/mm7
      - TECLOO_RECEIVER_RABBIT_EXCHANGE=mm7
      - TECLOO_RECEIVER_RABBIT_EXCHANGE_TYPE=direct

      - TUALET_HTTP_PORT=10006
      - TUALET_TEMPLATE_PATH=tualet/templates

      - SMS_RPC_PORT=10009
      - SMS_HOST=backend
      - SMS_POSTGRES_URL=postgresql://postgres:example@postgres/sms
      - SMS_RABBIT_URL=amqp://tp:TheToiletPaperPassword@rabbitmq:5672/sms
      - SMS_CLIENT_TIMEOUT=3
      - SMS_REDIS_URL=redis:6379
      - SMS_ALARIS_URL=http://backend:10006/api

    deploy:
      resources:
        limits:
          cpus: "4"
    depends_on:
      - rabbitmq
      - redis
      - minio
      - miniosetup
      - postgres
      - accountpostgressetup
      - mmspostgressetup

  rabbitmq:
    build:
      context: .
      dockerfile: ops/dev/docker-compose/Dockerfile_rabbitmq
    hostname: rabbitmq
    ports:
      - "27651:15672"
      - "56721:5672"

  redis:
    image: redis:3.2.9
    hostname: redis
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio
    hostname: minio
    command: server /data
    volumes:
      - minio_data:/data
    ports:
      - "9999:9000"
    environment:
      MINIO_ACCESS_KEY: mtmo-tp
      MINIO_SECRET_KEY: fr0gsn0g
      MINIO_REGION_NAME: ap-southeast-2

  miniosetup:
    image: minio/mc
    depends_on:
      - minio
    environment:
      MINIO_ACCESS_KEY: tp
      MINIO_SECRET_KEY: fr0gsn0g
      MINIO_REGION_NAME: ap-southeast-2
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio http://minio:9000 $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY} --api S3v4;
      /usr/bin/mc mb --ignore-existing --region=$${MINIO_REGION_NAME} minio/tp-csv;
      /usr/bin/mc policy set public minio/tp-csv;
      "

  postgres:
    image: postgres:11.8-alpine
    hostname: postgres
    volumes:
      - postgres_data:/data/postgres
    environment:
      POSTGRES_DB: "tp"
      POSTGRES_PASSWORD: "example"
      PGDATA: /data/postgres
    ports:
      - "54321:5432"

  accountpostgressetup:
    build:
      context: .
      dockerfile: backend/account/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      ACCOUNT_POSTGRES_HOST: postgres
      ACCOUNT_POSTGRES_USER: postgres
      ACCOUNT_POSTGRES_PASSWORD: example
      ACCOUNT_POSTGRES_SSL: disable
      ACCOUNT_POSTGRES_NAME: account
      ACCOUNT_POSTGRES_AUTH_DB: postgres

  mmspostgressetup:
    build:
      context: .
      dockerfile: backend/mms/migration/infra/Dockerfile
    depends_on:
      - postgres
    container_name: mmspostgressetup
    volumes:
      - ./backend:/backend
    environment:
      MMS_POSTGRES_HOST: postgres
      MMS_POSTGRES_USER: postgres
      MMS_POSTGRES_PASSWORD: example
      MMS_POSTGRES_SSL: disable
      MMS_POSTGRES_NAME: mms
      MMS_POSTGRES_AUTH_DB: postgres

  smspostgressetup:
    build:
      context: .
      dockerfile: backend/sms/migration/infra/Dockerfile
    depends_on:
      - postgres
    volumes:
      - ./backend:/backend
    environment:
      SMS_POSTGRES_HOST: postgres
      SMS_POSTGRES_USER: postgres
      SMS_POSTGRES_PASSWORD: example
      SMS_POSTGRES_SSL: disable
      SMS_POSTGRES_NAME: sms

volumes:
  redis_data:
  rabbitmq_data:
  minio_data:
  postgres_data:
