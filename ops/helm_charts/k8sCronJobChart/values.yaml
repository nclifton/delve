# TODO: Only use ${service.name} here once we move to Harness completely
name: job-name
# Component is the group of services (domain) the service belongs to
component: service-name
replicas: 1
# TODO: Only use ${app.name} here once we move to Harness completely
namespace: tp
# Harness can create a namespace if not exists so this is set to true in Harness.
# Helm install will error if the namespace already exists so set this to false
# and create the namespace first in deploy_services.sh when manually deploying.
createNamespace: ${environmentVariable.createNamespace}
namespaceAnnotations:
  "linkerd.io/inject": "enabled"
  "config.linkerd.io/trace-collector": "linkerd-collector.linkerd:55678"
  "config.alpha.linkerd.io/trace-collector-service-account": "linkerd-collector"

# TODO: Only use ${artifact.metadata.image} here once we move to Harness completely
image:
  repository: 006764518182.dkr.ecr.ap-southeast-2.amazonaws.com
  tag: latest
  pullPolicy: Always

# TODO: Comment back in once we mve to Harness completely
#dockercfg: ${artifact.source.dockerconfig}

# TODO: Only use env.name here once we move to Harness completely
podLabels:
  env: ${env.name}

# WORKAROUND: Till https://www.pivotaltracker.com/story/show/174031674 is implemented
podAnnotations:
  linkerd.io/inject: disabled

restartPolicy: OnFailure

job:
  schedule: 0 0 * * 1
  command:
    - /app
  #args:

#jobAnnotations:

# Specify all environment variables to be added to the container.
# The following two maps, config and secrets, are put into a ConfigMap
# and a Secret, respectively.
# Both are added to the container environment in podSpec as envFrom source.
env: {}
#  config:
#    key1: value1
#  secrets:
#    key2: value2

# TODO: Remove this and use defined env vars above
#existingConfigMapName: service-config
